"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" Plugins
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

call plug#begin('~/.config/nvim/plugged')

" Always load
Plug 'tpope/vim-surround'             " add/change/delete surrounding characters
Plug 'ctrlpvim/ctrlp.vim'             " sublime-style ctrl-p fuzzy file opening
Plug 'flazz/vim-colorschemes'         " extra colorschemes

" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
Plug 'airblade/vim-rooter'            " changes directory to project root
Plug 'benekastah/neomake'
Plug 'airblade/vim-gitgutter'         " awesome git/vim integration
Plug 'majutsushi/tagbar'              " nice tag support/functionality
Plug 'terryma/vim-multiple-cursors'   " pretty self explanatory
" Plug 'scrooloose/syntastic'
Plug 'rhysd/devdocs.vim'              " DevDocs integration for api lookups
Plug 'tmhedberg/matchit'              " %-matching with more than just characters
Plug 'itchyny/lightline.vim'          " lightweight version of airline
Plug 'felixhummel/setcolors.vim'
if has('nvim')
    Plug 'shougo/deoplete.nvim'
endif

" On Command
Plug 'godlygeek/tabular', {'on': 'Tabularize'}                             " lining up things in margins, like these comments
Plug 'scrooloose/nerdtree', {'on':  'NERDTreeToggle'}                      " NERDTree file browser of course
Plug 'kien/rainbow_parentheses.vim', {'on': 'RainbowParenthesesToggleAll'} " rainbow parentheses

" On File Type
Plug 'fatih/vim-go', {'for': ['go']}
Plug 'mitsuhiko/vim-jinja', {'for': ['jinja']}
Plug 'mxw/vim-jsx', {'for': ['jsx']}
Plug 'pangloss/vim-javascript', {'for': ['javascript']}
Plug 'stephpy/vim-yaml', {'for': ['yaml']}
Plug 'mattn/emmet-vim', {'for': ['html', 'css']}
Plug 'derekwyatt/vim-scala', {'for': ['scala']}
Plug 'hdima/python-syntax', {'for': ['python']}
Plug 'vim-scripts/SQLUtilities', {'for': ['sql']}
Plug 'hashivim/vim-hashicorp-tools', {'for': ['terraform']}
Plug 'rust-lang/rust.vim', {'for': ['rust']}

call plug#end()


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" => Options and variables
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

let mapleader = ","
filetype plugin indent on
set background=dark
colorscheme janah

" Turn on the Wild menu
set wildmenu
" Better tab completion for wildmenu
set wildmode=longest,list,full
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*/tmp/*,*.zip
" Always show current position
set ruler
" When searching try to be smart about cases
set smartcase
" Highlight search results
set hlsearch
" Find words as typing out search
set incsearch
" Start scrolling before cursor hits top/bottom
set scrolloff=5
" Number of lines to jump when scrolling off screen
" -# = percentage
set scrolljump=-10
" When splitting windows, keep what you're working on in the main position
set splitbelow
set splitright

" Use ripgrep if ya got it!
if executable("rg")
    set grepprg=rg\ --vimgrep
    set grepformat^=%f:%l:%c:%m
    " Recursively search for word under cursor
    nnoremap <leader>f :silent grep <C-R><C-W><CR>:cw<CR>
    " Recursively search for visually selected phrase
    vnoremap <leader>f y:silent grep '<C-R>"'<CR>:cw<CR>
endif

" Make searches legible
hi Search ctermfg=black
hi Visual cterm=reverse ctermbg=black

set pastetoggle=<F11>

" Quick funtion that will
" highlight over 80 columns
autocmd FileType cpp :autocmd! BufWritePre * :match ErrorMsg '\%>80v.\+'

" Set keywordprg according to filetype
autocmd FileType python,yaml :setlocal keywordprg=:DevDocs
autocmd FileType vim :setlocal keywordprg=:help

autocmd VimLeave * set guicursor=a:block-blinkon0

" Use Unix as the standard file type
set ffs=unix,mac,dos

" setup tags
set tags=./.tags;/

" Turn backup off, since most stuff is in SVN, git etc.
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs
set expandtab

" Do not expand tab for Makefiles
autocmd FileType make set noexpandtab

" Be smart when using tabs
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

" Auto indent and wrap lines
set ai
set wrap

" Create folds based on indentation
set foldmethod=indent
" Only fold up to a max of two times
set foldnestmax=2
" Start with all folds open
set foldlevel=99

" Set the backspace to work as expected
set backspace=2

" Do not auto-comment when using o or O
autocmd FileType * setlocal formatoptions-=o

" Auto remove trailing whitespace on write
autocmd BufWritePre * :%s/\s\+$//e

" Ultisnips stuff
let g:UltiSnipsEditSplit="context"
let g:UltiSnipsListSnippets="<c-s-tab>"
let g:ultisnips_python_style="sphinx"

" Neomake stuff
let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_python_flake8_maker = {
    \ 'args': ['--ignore=E501,E402,E303,E302,E251,E221']
    \ }
let g:neomake_error_sign = {
    \ 'text': '✗',
    \ }
let g:neomake_warning_sign = {
    \ 'text': '⚠',
    \ }
let g:neomake_info_sign = {
    \ 'text': '>',
    \ }
let g:neomake_airline = 1
let g:neomake_logfile='/tmp/neomake_err.log'
let g:syntastic_python_flake8_post_args='--ignore=E501,E402,E303,E302,E251,E221'
autocmd! BufReadPost * Neomake
autocmd! BufWritePost * Neomake

" Status Bar Stuff
let g:airline_powerline_fonts = 1
let g:airline_extensions = ['tabline', 'syntastic', 'ctrlp']


" ctrl-p stuff
let g:ctrlp_user_command = ['.git', 'git -C %s ls-files -co --exclude-standard']
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cmd = 'CtrlPMRU'

if exists(':DeopleteEnable')
    let g:deoplete#enable_at_startup = 1
endif

" Tabularize on pipes
function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
endfunction

" Split help window on longer axis
function! s:fit_help()
    if winwidth('%') > winheight('%')
        vert help
    else
        help
    endif
endfunction

let g:lightline = {
    \ 'colorscheme': 'seoul256',
    \ }

let g:limelight_conceal_ctermfg = 'gray'

"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" Remaps
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" Operator maps to get inside () '' // and "
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in) :<c-u>normal! F)vi)<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap in} :<c-u>normal! F}vi}<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap in] :<c-u>normal! F]vi]<cr>
onoremap in' :<c-u>normal! f'vi'<cr>
onoremap il' :<c-u>normal! F'vi'<cr>
onoremap in" :<c-u>normal! f"vi"<cr>
onoremap il" :<c-u>normal! F"vi"<cr>
onoremap il" :<c-u>normal! F"vi"<cr>
onoremap i/ :<c-u>normal! T/vt/<cr>

" Set the paste toggle
map <F10> :set paste<cr>
map <F11> :set nopaste<cr>
imap <F10> <C-O>:set paste<CR>
imap <F11> <nop>

" Move to next or previous buffer
nnoremap <leader>[ :bp<cr>
nnoremap <leader>] :bn<cr>
nnoremap <leader>b <C-^>

" Increase and Decrease the width of a vertically split window
nnoremap <leader>< :vertical resize -10<cr>
nnoremap <leader>> :vertical resize +10<cr>

" Rotate panes
nnoremap <leader>wvh <C-w>t<C-w>K
nnoremap <leader>whv <C-w>t<C-w>H

" Like gf but split window
nnoremap gs :wincmd f<cr>
nnoremap gS :vertical wincmd f<cr>

" Source and Edit nvim/init
nnoremap <leader>src :source ~/.config/nvim/init.vim<cr>
nnoremap <leader>erc :vsp ~/.config/nvim/init.vim<cr>

" Sudo save a file
nnoremap <leader>save :w !sudo dd of=%<cr>

nnoremap <leader>PI :PlugInstall<cr>
nnoremap <leader>PU :PlugUpdate<cr>
nnoremap <leader>PC :PlugClean<cr>

" Tabular stuff - see http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
if exists(":Tabularize")
    nnoremap <leader>a= :Tabularize /=<CR>
    vnoremap <leader>a= :Tabularize /=<CR>
    nnoremap <leader>a: :Tabularize /:\zs<CR>
    vnoremap <leader>a: :Tabularize /:\zs<CR>
endif

" Move to the TagBar if already opened or open and focus
" close the TagBar after selection
nnoremap <leader>tag :TagbarOpen fjc<cr>

" List Tasks
nnoremap <leader>l :TaskList<cr>

" Rainbow Parens stuff
nnoremap <leader>( :RainbowParenthesesToggleAll<cr>

" Remove current highlighting
nnoremap <silent> <leader>/ :noh<cr>

" Toggle NERDTree
nnoremap <leader>nt :NERDTreeToggle<cr>

" GitGutter
nnoremap <leader>ggu :GitGutterUndoHunk<cr>
nnoremap <leader>ggp :GitGutterPreviewHunk<cr>
nnoremap <leader>ggs :GitGutterStageHunk<cr>
nnoremap <leader>ggc :pclose<cr>

" Search and replace
nnoremap <leader>sar :%s/<C-R><C-W>//gc<left><left><left>
vnoremap <leader>sar y:%s/<C-R>"//gc<left><left><left>

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

if has('nvim')
    tnoremap <Esc> <C-\><C-n>
endif
