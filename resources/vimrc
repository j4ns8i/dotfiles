filetype plugin indent on
let mapleader = ","

" ================================+
" PLUGINS
" ================================-

call plug#begin('~/.config/nvim/plugged')

" =================================
" vim-surround
" add/change/delete surrounding characters
" =================================
Plug 'tpope/vim-surround'

" =================================
" ctrl-p
" sublime-style ctrl-p fuzzy file opening
" =================================
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_user_command = ['.git', 'git -C %s ls-files -co --exclude-standard']
let g:ctrlp_extensions = ['mixed']
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_max_files = 5000

" =================================
" vim-colorschemes
" extra colorschemes
" =================================
Plug 'flazz/vim-colorschemes'

" =================================
" vim-rooter
" changes directory to project root
" =================================
Plug 'airblade/vim-rooter'

" =================================
" neomake
" =================================
Plug 'benekastah/neomake'
let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_python_flake8_maker = {
    \ 'args': ['--ignore=E501']
    \ }
" let g:neomake_python_flake8_maker = {
"     \ 'args': ['--ignore=E501,E402,E303,E302,E251,E221']
"     \ }
let g:neomake_error_sign = {
    \ 'text': '✗',
    \ }
let g:neomake_warning_sign = {
    \ 'text': '⚠',
    \ }
let g:neomake_info_sign = {
    \ 'text': '>',
    \ }
let g:neomake_logfile='/tmp/neomake_err.log'
autocmd! BufReadPost * Neomake
autocmd! BufWritePost * Neomake

" =================================
" nerdcommenter
" commenting shortcuts
" =================================
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1             " add spaces after comment marker
let g:NERDDefaultAlign = 'left'       " align comment markers flush against the left border

" =================================
" vim-fugitive
" even awesomer git/vim integration
" =================================
Plug 'tpope/vim-fugitive'

" vim-fugitive
nnoremap <leader>gb :Gblame<cr>

" =================================
" gitgutter
" =================================
" Plug 'airblade/vim-gitgutter'

" GitGutter
" nnoremap <leader>ggu :GitGutterUndoHunk<cr>
" nnoremap <leader>ggp :GitGutterPreviewHunk<cr>
" nnoremap <leader>ggs :GitGutterStageHunk<cr>
" nnoremap <leader>ggc :pclose<cr>

" =================================
" tagbar
" nice tag support/functionality
" =================================
Plug 'majutsushi/tagbar'

" Move to the TagBar if already opened or open and focus
" close the TagBar after selection
nnoremap <leader>tag :TagbarOpen fjc<cr>

let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'kinds': [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }

" =================================
" vim-multiple-cursors
" pretty self explanatory
" =================================
Plug 'terryma/vim-multiple-cursors'

" =================================
" devdocs
" DevDocs integration for api lookups
" =================================
Plug 'rhysd/devdocs.vim'

" =================================
" matchit
" %-matching with more than just characters
" =================================
Plug 'tmhedberg/matchit'

" =================================
" lightline
" lightweight version of airline
" =================================
Plug 'itchyny/lightline.vim'

let g:lightline = {
    \ 'colorscheme': 'seoul256',
    \ 'active': {
    \   'right': [ [ 'lineinfo' ],
    \               [ 'percent'  ],
    \               [ 'filetype' ] ] },
    \ }

" =================================
" setcolors
" =================================
Plug 'felixhummel/setcolors.vim'

" =================================
" deoplete
" =================================
if has('nvim')
    Plug 'shougo/deoplete.nvim'
endif

if exists(':DeopleteEnable')
    let g:deoplete#enable_at_startup = 1
endif

" On Command

" =================================
" tabularize
" lining up things in margins
" =================================
Plug 'godlygeek/tabular'

" Tabularize on pipes
function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
        Tabularize/|/l1
        normal! 0
        call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
endfunction

" Tabular stuff - see http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
if exists(":Tabularize")
    nnoremap <leader>a= :Tabularize /=<CR>
    vnoremap <leader>a= :Tabularize /=<CR>
    nnoremap <leader>a: :Tabularize /:\zs<CR>
    vnoremap <leader>a: :Tabularize /:\zs<CR>
endif

" =================================
" NERDTree
" NERDTree file browser of course
" =================================
Plug 'scrooloose/nerdtree'

" Toggle NERDTree
nnoremap <leader>nt :NERDTreeToggle<cr>

" =================================
" rainbow parens
" =================================
Plug 'kien/rainbow_parentheses.vim'

" On File Type

" =================================
" vim-go
" =================================
Plug 'fatih/vim-go', {'for': ['go']}

" =================================
" vim-jinja
" =================================
Plug 'mitsuhiko/vim-jinja', {'for': ['jinja']}

" =================================
" vim-jsx
" =================================
Plug 'mxw/vim-jsx', {'for': ['jsx']}

" =================================
" vim-javascript
" =================================
Plug 'pangloss/vim-javascript', {'for': ['javascript']}

" =================================
" vim-yaml
" =================================
Plug 'stephpy/vim-yaml', {'for': ['yaml']}

" =================================
" emmet-vim
" =================================
Plug 'mattn/emmet-vim', {'for': ['html', 'css']}

" =================================
" vim-scala
" =================================
Plug 'derekwyatt/vim-scala', {'for': ['scala']}

" =================================
" python-syntax
" =================================
Plug 'hdima/python-syntax', {'for': ['python']}

" =================================
" SQLUtilities
" =================================
Plug 'vim-scripts/SQLUtilities', {'for': ['sql']}

" =================================
" terraform
" =================================
Plug 'hashivim/vim-hashicorp-tools', {'for': ['terraform']}

" =================================
" rust.vim
" =================================
Plug 'rust-lang/rust.vim', {'for': ['rust']}

" =================================
" vim-markdown
" markdown niceties
" =================================
Plug 'gabrielelana/vim-markdown'
let g:markdown_enable_spell_checking = 0
let g:markdown_enable_input_abbreviations = 0
let g:markdown_enable_conceal = 1

call plug#end()

" =================================
" Options and variables
" =================================

set background=dark
colo wal

" Turn on the Wild menu
set wildmenu

" Better tab completion for wildmenu
set wildmode=longest,list,full

" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*/tmp/*,*.zip

" Always show current position
set ruler

" When searching try to be smart about cases
set ignorecase
set smartcase

" Highlight search results
set hlsearch

" Find words as typing out search
set incsearch

" Show the results of a substitution while you type (but not in a split window
set inccommand=nosplit

" Start scrolling before cursor hits top/bottom
set scrolloff=5

" Number of lines to jump when scrolling off screen
" -# = percentage
set scrolljump=-10

" When splitting windows, keep what you're working on in the main position
set splitbelow
set splitright

" Use ripgrep if ya got it!
if executable("rg")
    set grepprg=rg\ --vimgrep
    set grepformat^=%f:%l:%c:%m
    " Recursively search for word under cursor
    nnoremap <leader>f :silent grep <C-R><C-W><CR>:cw<CR>
    " Recursively search for visually selected phrase
    vnoremap <leader>f y:silent grep '<C-R>"'<CR>:cw<CR>
endif

set pastetoggle=<F11>

" Quick funtion that will highlight over 80 columns
autocmd FileType cpp :autocmd! BufWritePre * :match ErrorMsg '\%>80v.\+'

" Set keywordprg according to filetype
autocmd FileType python,yaml :setlocal keywordprg=:DevDocs
autocmd FileType vim :setlocal keywordprg=:help

autocmd VimLeave * set guicursor=a:block-blinkon0

" Use Unix as the standard file type
set ffs=unix,mac,dos

" setup tags
set tags=./.tags;/

" Turn backup off, since most stuff is in SVN, git etc.
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs
set expandtab

" Do not expand tab for Makefiles
autocmd FileType make set noexpandtab

" Be smart when using tabs
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

" Auto indent and wrap lines
set autoindent
set wrap

" Create folds based on indentation
set foldmethod=indent
" Only fold up to a max of two times
set foldnestmax=2
" Start with all folds open
set foldlevel=99

" 'Add/substract' letters with ctrl-a / ctrl-x
set nrformats+=alpha

" Set the backspace to work as expected
set backspace=2

" Do not auto-comment when using o or O
autocmd FileType * setlocal formatoptions-=o
" Do not auto-indent (crazily) when commenting out a line
autocmd FileType yaml,python setlocal indentkeys-=0#

" Auto remove trailing whitespace on write
autocmd BufWritePre * :%s/\s\+$//e

" Split help window on longer axis
function! Fit_help(...)
    if winwidth('%') > winheight('%')
        execute "vert help " . join(a:000, ' ')
    else
        execute "help " . join(a:000, ' ')
    endif
endfunction
command! -nargs=* -complete=help H call Fit_help(<f-args>)

" Split file(s) across larger current dimension
function! s:auto_split(...)
    if winwidth(0) > winheight(0) * 2.5
        execute "vert split " . join(a:000, ' ')
    else
        execute "split " . join(a:000, ' ')
    endif
endfunction
command! -nargs=* -complete=file Asp call s:auto_split(<f-args>)
nnoremap <leader>asp :Asp<space>

" Operator maps to get inside () '' // and "
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in) :<c-u>normal! F)vi)<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap in} :<c-u>normal! F}vi}<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap in] :<c-u>normal! F]vi]<cr>
onoremap in' :<c-u>normal! f'vi'<cr>
onoremap il' :<c-u>normal! F'vi'<cr>
onoremap in" :<c-u>normal! f"vi"<cr>
onoremap il" :<c-u>normal! F"vi"<cr>
onoremap il" :<c-u>normal! F"vi"<cr>
onoremap i/ :<c-u>normal! T/vt/<cr>
onoremap <space> t_
onoremap i<space> :<c-u>normal! T_vt_<cr>
onoremap a<space> :<c-u>normal! F_vf_<cr>

" Set the paste toggle
map <F10> :set paste<cr>
map <F11> :set nopaste<cr>
imap <F10> <C-O>:set paste<CR>
imap <F11> <nop>

" Move to next or previous buffer
nnoremap <leader>[ :bp<cr>
nnoremap <leader>] :bn<cr>
nnoremap <leader>b <C-^>

" Increase and Decrease the width of a vertically split window
nnoremap <leader>< :vertical resize -10<cr>
nnoremap <leader>> :vertical resize +10<cr>

" Rotate panes
nnoremap <leader>wvh <C-w>t<C-w>K
nnoremap <leader>whv <C-w>t<C-w>H

" Like gf but split window
nnoremap gs :wincmd f<cr>
nnoremap gS :vertical wincmd f<cr>

" Source and Edit nvim/init
nnoremap <leader>src :source ~/.config/nvim/init.vim<cr>
nnoremap <leader>erc :Asp ~/.config/nvim/init.vim<cr>

" Sudo save a file
nnoremap <leader>save :w !sudo dd of=%<cr>

nnoremap <leader>PI :PlugInstall<cr>
nnoremap <leader>PU :PlugUpdate<cr>
nnoremap <leader>PC :PlugClean<cr>

" Remove current highlighting
nnoremap <silent> <leader>/ :noh<cr>

" Search and replace
nnoremap <leader>sar :%s/<C-R><C-W>//gc<left><left><left>
vnoremap <leader>sar "sy:%s/<C-R>s//gc<left><left><left>

" Resize pane to its height
nnoremap <leader>ww :execute "resize " . line('$')<cr>gg

nnoremap <leader>pass :let @p = system('openssl rand -base64 16 \| head -c 20')<cr>

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

if has('nvim')
    tnoremap <Esc> <C-\><C-n>
endif

function! SynGroup()
    let l:s = synID(line('.'), col('.'), 1)
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

nnoremap <leader>hi :call SynGroup()<CR>
