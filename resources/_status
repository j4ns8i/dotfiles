#compdef status

_status_caching_policy () {
  local -a newer
  # rebuild if cache does not exist or is more than a day old
  newer=( "$1"(Nm-1) )
  return $#newer
}

_status () {
  # set -x
  # filename of zsh cache
  local cache_id="atg_dns"

  # local variable name to use
  local array_name="all_dns_records"

  # list of environments
  local environments=( atg exede )

  local update_policy
  zstyle -s ":completion:*:*:status:*" cache-policy update_policy
  if [[ -z "$update_policy" ]]; then
    zstyle ":completion:*:*:status:*" cache-policy _status_caching_policy
  fi

  # if either the var named $array_name is unset or the cache needs to be rebuilt
  # and you can't fetch the cached value, build cache
  if ( [[ ${(P)+array_name} -eq 0 ]] || _cache_invalid $cache_id ) && ! _retrieve_cache $cache_id; then

    # cache is gone or old, retrieve DNS records if you can
    if [[ -n "${VICECLI_USER}" && -n "${VICECLI_PWD}" ]]; then
      typeset -agU $array_name

      # get dns records for each environment specified
      for env in $environments; do
        local dns_mapping
        local -aU records
        dns_mapping=$(curl -f -s -u ${VICECLI_USER}:${VICECLI_PWD} \
          https://api.us-or.viasat.io/api/v1/environments/${env}/dns/internal.json)

        # if curl fails (auth) then exit before you lock your account
        if [[ $? -ne 0 ]]; then return 1; fi

        # grab just hostnames from the dns mapping
        records=( $(echo $dns_mapping | jq -r '.[] | select(.type=="A") | .hostname' 2>/dev/null) )

        # append $env's dns records to global array
        set -A $array_name ${(P)array_name} ${records[@]}
        unset dns_mapping records
      done

      _store_cache $cache_id $array_name
      _describe 'values' $array_name
    else
      # return empty array
      local -a empty_array=( )
      _describe 'values' $empty_array
    fi

  else
    # return cached value
    _describe 'values' $array_name
  fi
}

_status "$@"

