#!/bin/bash

CONFIG_DIR="${HOME}/.config"
CODE="${HOME}/code"
RESOURCES_DIR="$( cd `dirname $0` && pwd )/resources"

function _configure_iterm2() {
    _print_status "Configuring iTerm2..."
    cp -R ${RESOURCES_DIR}/iterm2 ${CONFIG_DIR}/
    source ${RESOURCES_DIR}/fonts/install.sh
    sed -i .bak "s|/Users/justinsmalkowski/code/src/external/dotfiles/resources/iterm2|${CONFIG_DIR}/iterm2|" ${CONFIG_DIR}/iterm2/com.googlecode.iterm2.plist
}

function _configure_homebrew() {
    # Install homebrew
    _print_status "Installing homebrew... "
    /usr/bin/ruby -e `cat ${RESOURCES_DIR}/_install_homebrew`
}

function _configure_bundle() {
    # Install bundle - Brew can use Brewfiles with the brew bundle command
    _print_status "Installing formulas from Brewfile... "
    brew tap homebrew/bundle
    brew bundle --file=${RESOURCES_DIR}/Brewfile
}

function _configure_zsh() {
    # Change shell to zsh if all goes as expected
    _print_status "Installing zsh... "
    ZSH_PATH="/usr/local/bin/zsh"
    if [[ -f $ZSH_PATH ]] && [[ ${ZSH_PATH} != ${SHELL} ]]; then
        echo "Change shell to ${ZSH_PATH}? [y/n]"
        read RESPONSE
        if [[ ${RESPONSE} = 'y' ]]; then
            IN_ETC_SHELLS=$(grep ${ZSH_PATH} /etc/shells)
            if [[ -z ${IN_ETC_SHELLS} ]]; then
                echo "Adding ${ZSH_PATH} to /etc/shells"
                sudo sh -c "echo $ZSH_PATH >> /etc/shells"
            fi
            CHSH_CMD="chsh -s ${ZSH_PATH}";
            echo ${CHSH_CMD};
            eval ${CHSH_CMD}
        else
            echo "Leaving the default shell as it is."
        fi
    elif [[ ${ZSH_PATH} = ${SHELL} ]]; then
        echo "Nice, you're already using zsh."
    else
        echo "${ZSH_PATH} was not found. Did you change where brew installs files?"
        return 1
    fi

    cp ${RESOURCES_DIR}/zshrc ${HOME}/.zshrc
}

function _configure_python_packages() {
    # Install python packages in virtualenvs for 2 and 3
    _print_status "Installing python packages... "
    pip install virtualenv==15.0.2

    echo "... in venv2 for python 2
"
    VENV2_PATH="${CODE}/venv2"
    if [[ ! -d ${VENV2_PATH} ]]; then
        echo "Setting up python 2 virtual environment under ${VENV2_PATH}"
        virtualenv -p python2 ${VENV2_PATH}
    fi
    source ${VENV2_PATH}/bin/activate
    pip install -r ${RESOURCES_DIR}/requirements.txt
    deactivate

    echo "
and venv3 for python 3
"
    VENV3_PATH="${CODE}/venv3"
    if [[ ! -d ${VENV3_PATH} ]]; then
        echo "Setting up python 3 virtual environment under ${VENV3_PATH}"
        virtualenv -p python3 ${VENV3_PATH}
    fi
    source ${VENV3_PATH}/bin/activate
    pip install -r ${RESOURCES_DIR}/requirements.txt
    deactivate
}

function _configure_nvim() {
    # Get vim-plug and set up nvim config
    _print_status "Configuring neovim... "
    mkdir -p ${CONFIG_DIR}/nvim/autoload
    cp ${RESOURCES_DIR}/plug.vim ${CONFIG_DIR}/nvim/autoload/
    ln -sf ${CONFIG_DIR}/nvim ${HOME}/.vim
    cp ${RESOURCES_DIR}/vimrc ${CONFIG_DIR}/nvim/init.vim
    ln -sf ${CONFIG_DIR}/nvim/init.vim ${HOME}/.vimrc
    nvim -c "PlugInstall" -c "PlugUpdate" -c "qa" --headless
}

function _configure_ohmyzsh() {
    # oh-my-zsh
    _print_status "Installing oh-my-zsh... "
    cp -R ${RESOURCES_DIR}/oh-my-zsh/ ${HOME}/.oh-my-zsh
}

function _configure_powerline() {
    # Powerline
    _print_status "Installing powerline... "
    cp -R ${RESOURCES_DIR}/powerline ${CONFIG_DIR}/powerline
}

function _configure_completions() {
    # Zsh completions
    _print_status "Install zsh completions... "
    mkdir -p ${HOME}/.oh-my-zsh/completions
    cp ${RESOURCES_DIR}/zsh-completions/src/* ${HOME}/.oh-my-zsh/completions
    cp ${RESOURCES_DIR}/_ggr ${RESOURCES_DIR}/_ggo ${HOME}/.oh-my-zsh/completions
}

function _configure_git() {
    # Git config
    _print_status "Configuring git... "
    mkdir -p ${CONFIG_DIR}/git
    cp ${RESOURCES_DIR}/gitconfig ${CONFIG_DIR}/git/config
}

function _print_status() {
    # Utility function for printing steps
    echo -e "\033[33;1m${@}\033[0m"
    read -t 1
}

###############################################
###############################################
######                                   ######
######     Beginning of installation     ######
######                                   ######
###############################################
###############################################


# setup directory structure
#
# ideal structure below:
# ~/code
#  |- src
#  |  |- external
#  |  |  |- <repo1>
#  |  |  |- <repo2>
#  |  |- <org1>
#  |  |  |- <repo3>
#  |  |- <org2>
#  |  |  |- <repo4>
mkdir -p ${CODE}/src/external

git submodule update --init

CONFIG_MODULES=( \
    _configure_iterm2 \
    _configure_homebrew \
    _configure_bundle \
    _configure_ohmyzsh \
    _configure_zsh \
    _configure_python_packages \
    _configure_nvim \
    _configure_powerline \
    _configure_completions \
    _configure_git
)

for s in ${CONFIG_MODULES[@]}; do
    eval ${s} || exit
    echo "Done.
"
done

_print_status "All done!\
You should probably just exit iTerm2 and relaunch it to load the new configurations"
